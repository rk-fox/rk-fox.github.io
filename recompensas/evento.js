// Substitua esta string pelo seu c√≥digo BASE64
const base64String = "";

// Fun√ß√£o para converter valor em GHs, THs ou PHs com base no valor
function formatPower(value) {
    if (value >= 1e6) {
        // Base 9: PHs (Petahashes)
        return `${(value / 1e6).toFixed(2)} PHs`;
    } else if (value >= 1e3) {
        // Base 6: THs (Terahashes)
        return `${(value / 1e3).toFixed(2)} THs`;
    } else {
        // Valores menores que 1000
        return `${(value)} GHs`; // Supondo que para valores menores que 1000 a unidade seja Hashes
    }
}

// Decodifica a string BASE64 
const decodedString = atob(base64String);
const jsonData = JSON.parse(decodedString);

// Extrai informa√ß√µes do JSON
const eventDescription = jsonData.event.title.en;
const rewards = jsonData.rewards;
const levelsConfig = jsonData.levels_config || [];

// Inicializa o total acumulado de XP
let totalXP = 0;
let totalPower = 0;
let totalBonus = 0;
let totalCustomValue = 0;

// Cria um mapa de n√≠veis para XP
const levelXPMap = levelsConfig.reduce((acc, level) => {
    acc[level.level] = level.level_xp;
    return acc;
}, {});

// Fun√ß√£o para converter n√≠vel em nome
function levelToName(level) {
    switch (level) {
        case 0: return "Comum";
        case 1: return "Incomum";
        case 2: return "Rara";
        case 3: return "√âpica";
        case 4: return "Lend√°ria";
        case 5: return "Unreal";
        default: return "Desconhecido";
    }
}

// Fun√ß√£o para atualizar os totais
function updateTotals() {
    totalBonus = 0;
    totalCustomValue = 0;

    // Itera sobre as linhas da tabela para somar os valores
    tableBody.querySelectorAll('tr').forEach(row => {
        let powerCell = row.children[4]; // Coluna 5 (Power)
        let bonusCell = row.children[5]; // Coluna 6 (Bonus)
        let customValueCell = row.children[7]; // Coluna 8 (Valores Personalizados)

        // Atualiza o total de Power
        if (powerCell) {
            let powerText = powerCell.textContent;
            // Extrai o n√∫mero antes da unidade de formata√ß√£o
            let powerValue = parseFloat(powerText);
            if (!isNaN(powerValue)) {
                totalPower += powerValue;
            }
        }

        // Atualiza o total de Bonus
        if (bonusCell && bonusCell.textContent.endsWith('%')) {
            let bonusValue = parseFloat(bonusCell.textContent);
            if (!isNaN(bonusValue)) {
                totalBonus += bonusValue;
            }
        }

        // Atualiza o total de Valores Personalizados
        let inputValue = customValueCell.querySelector('input');
        if (inputValue) {
            let inputValueNumber = parseFloat(inputValue.value) || 0;
            totalCustomValue += inputValueNumber;
        }
    });

    // Atualiza a linha de totais
    let totalRow = tableBody.querySelector('tr.total-row');
    if (totalRow) {
        // Atualiza a c√©lula de Power
        totalRow.children[4].innerHTML = `Total Power<br>${formatPower(totalPower)}`;

        // Atualiza a c√©lula de Bonus
        totalRow.children[5].innerHTML = `Total Bonus<br>${(totalBonus).toFixed(2)} %`;

        // Atualiza a c√©lula de Valores Personalizados
        totalRow.children[7].innerHTML = `Valor Total<br>${totalCustomValue.toFixed(2)}`;
    }
}

// Fun√ß√£o para adicionar a linha de totais
function addTotalsRow() {
    let row = document.createElement('tr');
    row.className = 'total-row';

    // Cria a c√©lula para cada coluna, inicialmente vazia ou com r√≥tulo
    for (let i = 0; i < 8; i++) {
        let cell = document.createElement('td');
        if (i === 4) { // Power
            cell.innerHTML = `Total Power<br>${formatPower(totalPower)}`;
        } else if (i === 5) { // Bonus
            cell.innerHTML = `Total Bonus<br>${(totalBonus).toFixed(2)} %`;
        } else if (i === 7) { // Custom Value
            cell.innerHTML = `Valor Total<br>${totalCustomValue.toFixed(2)}`;
        } else {
            cell.style.backgroundColor = '#ddd'; // Define o fundo da c√©lula como cinza
            cell.textContent = ''; // Deixa o conte√∫do da c√©lula vazio
        }
        row.appendChild(cell);
    }

    tableBody.appendChild(row);
}

// Preenche o cabe√ßalho da tabela com o t√≠tulo do evento
const tableHeaderRow = document.querySelector('#nomeevento');
const headerCell = document.createElement('th');
headerCell.colSpan = 8; // Como h√° 8 colunas, faz sentido usar colSpan=8
headerCell.textContent = eventDescription;
tableHeaderRow.appendChild(headerCell);

// Preenche a tabela com os dados
const tableBody = document.querySelector('#dataTable tbody');

rewards.forEach(reward => {
    let row = document.createElement('tr');

    // Cria a c√©lula para o n√≠vel
    let cellLevel = document.createElement('td');
    cellLevel.textContent = reward.required_level || '-';
    row.appendChild(cellLevel);
    
    // Calcula e atualiza o XP total
    let cellXPValue = levelXPMap[reward.required_level] || 0;
    totalXP += parseFloat(cellXPValue);

    let cellXP = document.createElement('td');
    cellXP.textContent = cellXPValue.toLocaleString() || '-';
    row.appendChild(cellXP);

    let cellTotalXP = document.createElement('td');
    cellTotalXP.textContent = Math.floor(totalXP).toLocaleString();
    row.appendChild(cellTotalXP);

    // Cria a c√©lula para a quantidade e imagem
    let cellAmount = document.createElement('td');

    if (reward.type === 'money') {
        // Cria uma <div> para a imagem e a outra <div> para o texto
        let imageContainer = document.createElement('div');
        let textContainer = document.createElement('div');

        // Define a imagem fixa baseada na moeda
        let currencyImageURL = reward.currency === 'RLT'
            ? 'https://rollercoin.com/static/img/seasonPass/reward_RLT.png'
            : 'https://rollercoin.com/static/img/seasonPass/reward_RST.png';

        // Cria a imagem para a moeda
        let currencyImage = document.createElement('img');
        currencyImage.src = currencyImageURL;
        currencyImage.alt = reward.currency;
        currencyImage.style.width = '50px'; // Define o tamanho da imagem
        currencyImage.style.height = 'auto'; // Mant√©m a propor√ß√£o da altura

        // Adiciona a imagem ao container da imagem
        imageContainer.appendChild(currencyImage);

        // Adiciona o container da imagem e o texto √† c√©lula
        cellAmount.appendChild(imageContainer);

        // Cria o texto para a quantidade
        let amountText = document.createElement('span');
        amountText.textContent = ` ${(reward.amount / 1000000).toFixed(2)} ${reward.currency}`;

        // Adiciona o texto ao container do texto
        textContainer.appendChild(amountText);

        // Adiciona o container do texto √† c√©lula
        cellAmount.appendChild(textContainer);
    } else if (reward.type === 'miner') {
    const item = reward.item || {};
    
    // Cria uma <div> para a imagem e a outra <div> para o texto
    let imageContainer = document.createElement('div');
    let textContainer = document.createElement('div');

    // Construa a URL da imagem do minerador
    const baseURL = "https://static.rollercoin.com/static/img/market/miners/";
    const filename = item.filename;
    const imageURL = `${baseURL}${filename}.gif`;

    // Cria o link para o minerador
    let minerLink = document.createElement('a');
    minerLink.href = `https://rollercoin.com/marketplace/buy/miner/${item._id}`;
    minerLink.target = "_blank"; // Abre em nova aba

    // Cria a imagem para o minerador
    let minerImage = document.createElement('img');
    minerImage.src = imageURL;
    minerImage.alt = item.name.en;
    minerImage.style.width = '50px'; // Define o tamanho da imagem
    minerImage.style.height = 'auto'; // Mant√©m a propor√ß√£o da altura

    // Adiciona a imagem ao link
    minerLink.appendChild(minerImage);
    
    // Adiciona o link ao container da imagem
    imageContainer.appendChild(minerLink);

    // Cria o texto para o n√≠vel e nome do item
    let itemDetails = document.createElement('span');
    let levelName = levelToName(item.level); // Converte o n√≠vel para nome
    itemDetails.textContent = `${item.name?.en} ${levelName}`;

    // Adiciona o texto ao container de texto
    textContainer.appendChild(itemDetails);

    // Adiciona os containers √† c√©lula
    cellAmount.appendChild(imageContainer);
    cellAmount.appendChild(textContainer);
} else if (reward.type === 'power') {
        // Cria uma <div> para a imagem e a outra <div> para o texto
        let imageContainer = document.createElement('div');
        let textContainer = document.createElement('div');

        // Define a URL da imagem do poder tempor√°rio
        const powerImageURL = 'https://rollercoin.com/static/img/seasonPass/reward_power.png';

        // Cria a imagem para o poder tempor√°rio
        let powerImage = document.createElement('img');
        powerImage.src = powerImageURL;
        powerImage.alt = 'Power';
        powerImage.style.width = '50px'; // Define o tamanho da imagem
        powerImage.style.height = 'auto'; // Mant√©m a propor√ß√£o da altura

        // Adiciona a imagem ao container da imagem
        imageContainer.appendChild(powerImage);

        // Formata o valor do poder
        let formattedPower = (reward.amount / 1000000).toFixed(2);

        // Cria o texto para a quantidade de poder
        let powerText = document.createElement('span');
        powerText.textContent = `${formattedPower} PHs Tempor√°rio`;

        // Adiciona o texto ao container de texto
        textContainer.appendChild(powerText);

        // Adiciona os containers √† c√©lula
        cellAmount.appendChild(imageContainer);
        cellAmount.appendChild(textContainer);
    } else if (reward.type === 'rack') {
    const item = reward.item || {};

    // Cria uma <div> para a imagem e a outra <div> para o texto
    let imageContainer = document.createElement('div');
    let textContainer = document.createElement('div');

    // Construa a URL da imagem do rack
    const baseURL = "https://static.rollercoin.com/static/img/market/racks/";
    const filename = item._id;
    const imageURL = `${baseURL}${filename}.png`;

    // Cria o link para o rack
    let rackLink = document.createElement('a');
    rackLink.href = `https://rollercoin.com/marketplace/buy/rack/${item._id}`;
    rackLink.target = "_blank"; // Abre em nova aba

    // Cria a imagem para o rack
    let rackImage = document.createElement('img');
    rackImage.src = imageURL;
    rackImage.alt = item.name.en;
    rackImage.style.width = '50px'; // Define o tamanho da imagem
    rackImage.style.height = 'auto'; // Mant√©m a propor√ß√£o da altura

    // Adiciona a imagem ao link
    rackLink.appendChild(rackImage);
    
    // Adiciona o link ao container da imagem
    imageContainer.appendChild(rackLink);

    // Cria o texto para o nome do item
    let itemDetails = document.createElement('span');
    itemDetails.textContent = `${item.name?.en}`;

    // Adiciona o texto ao container de texto
    textContainer.appendChild(itemDetails);

    // Adiciona os containers √† c√©lula
    cellAmount.appendChild(imageContainer);
    cellAmount.appendChild(textContainer);
} else {
    cellAmount.textContent = '-';
}

    row.appendChild(cellAmount);

    let cellPower = document.createElement('td');
    let rawPowerValue = reward.item?.power || 0;
    if (rawPowerValue) {
    totalPower += rawPowerValue;
}
    cellPower.textContent = reward.item?.power ? formatPower(reward.item.power) : '-';
    row.appendChild(cellPower);

    let cellBonus = document.createElement('td');
    const bonus = reward.item?.bonus != null ? (reward.item?.bonus / 100).toFixed(2) : '-';
    cellBonus.textContent = bonus !== '-' ? `${bonus} %` : '-';
    row.appendChild(cellBonus);

    let cellCanBeSoldOnMP = document.createElement('td');
if (reward.type === 'rack') {
    // Se o tipo for 'rack', o conte√∫do ser√° sempre vazio (resultando em true)
    cellCanBeSoldOnMP.textContent = '';
} else {
    // Caso contr√°rio, mant√©m a l√≥gica original
    cellCanBeSoldOnMP.textContent = reward.item?.is_can_be_sold_on_mp ? '' : 'X';
}
row.appendChild(cellCanBeSoldOnMP);

    // Nova c√©lula para o valor personalizado, edit√°vel pelo usu√°rio
    let cellCustomValue = document.createElement('td');
    let input = document.createElement('input');
    input.type = 'number';  // Define o tipo como num√©rico
    input.name = 'cellValor';  // Nome para identifica√ß√£o do input
    input.value = '';  // Valor padr√£o

    input.className = 'input-custom'; // Adiciona a classe personalizada
    cellCustomValue.appendChild(input);
    row.appendChild(cellCustomValue);

    tableBody.appendChild(row);
});

// Adiciona a linha de totais
addTotalsRow();

// Atualiza os totais inicialmente
updateTotals();

// Adiciona um evento de mudan√ßa a cada input da coluna 8
tableBody.addEventListener('input', event => {
    if (event.target.tagName === 'INPUT') {
        updateTotals();
    }
});

// Define o t√≠tulo da p√°gina
document.title = `RKFox - ${eventDescription}`;

// Adiciona funcionalidade de modo escuro
document.getElementById('toggle-dark-mode').addEventListener('change', (event) => {
    if (event.target.checked) {
        document.body.classList.add('dark-mode');
    } else {
        document.body.classList.remove('dark-mode');
    }
});
